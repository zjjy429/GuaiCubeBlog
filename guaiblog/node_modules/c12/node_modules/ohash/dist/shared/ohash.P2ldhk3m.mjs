function serialize(s){return typeof s=="string"?`'${s}'`:new l().serialize(s)}const l=/*@__PURE__*/function(){class s{#t=new Map;compare(t,r){return typeof t=="number"&&typeof r=="number"?t-r:String.prototype.localeCompare.call(this.serialize(t,true),this.serialize(r,true))}serialize(t,r){if(t===null)return "null";switch(typeof t){case "string":return r?t:`'${t}'`;case "bigint":return `${t}n`;case "object":return this.$object(t);case "function":return this.$function(t)}return String(t)}serializeObject(t){const r=Object.prototype.toString.call(t),n=t.constructor?.name,o=n==="Object"||n===void 0?"":n;let e=r.length<10?`unknown:${r}`:r.slice(8,-1);if(e==="Object"&&o in globalThis&&(e=o),e!=="Object"&&e!=="Function"&&e!=="AsyncFunction"){const a=this["$"+e];if(a)return a.call(this,t);if(typeof t?.entries=="function")return this.serializeObjectEntries(e,t.entries());throw new Error(`Cannot serialize ${e}`)}return typeof t.toJSON=="function"?o+this.$object(t.toJSON()):this.serializeObjectEntries(o,Object.entries(t))}serializeObjectEntries(t,r){const n=Array.from(r).sort((e,a)=>this.compare(e[0],a[0]));let o=`${t}{`;for(let e=0;e<n.length;e++){const[a,c]=n[e];o+=`${a}:`,o+=this.serialize(c),e<n.length-1&&(o+=",");}return o+"}"}$object(t){let r=this.#t.get(t);return r===void 0&&(this.#t.set(t,`#${this.#t.size}`),r=this.serializeObject(t),this.#t.set(t,r)),r}$function(t){const r=Function.prototype.toString.call(t);return r.slice(-15)==="[native code] }"?`${t.name||""}()[native]`:`${t.name}(${t.length})${r.replace(/\s*\n\s*/g,"")}`}$Array(t){let r="[";for(let n=0;n<t.length;n++)r+=this.serialize(t[n]),n<t.length-1&&(r+=",");return r+"]"}$Date(t){try{return `Date(${t.toISOString()})`}catch{return "Date(null)"}}$ArrayBuffer(t){return `ArrayBuffer[${Array.prototype.slice.call(new Uint8Array(t)).join(",")}]`}$Set(t){return `Set${this.$Array(Array.from(t).sort((r,n)=>this.compare(r,n)))}`}$Map(t){return this.serializeObjectEntries("Map",t.entries())}}for(const i of ["Error","RegExp","URL"])s.prototype["$"+i]=function(t){return `${i}(${t})`};for(const i of ["Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array"])s.prototype["$"+i]=function(t){return `${i}[${Array.prototype.slice.call(t).join(",")}]`};for(const i of ["BigInt64Array","BigUint64Array"])s.prototype["$"+i]=function(t){return `${i}[${Array.prototype.slice.call(t).map(r=>`${r}n`).join(",")}]`};return s}();

function isEqual(object1, object2) {
  if (object1 === object2) {
    return true;
  }
  if (serialize(object1) === serialize(object2)) {
    return true;
  }
  return false;
}

export { isEqual as i, serialize as s };
